import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public int[] roll(int num){
        Random random = new Random();
        int[] rolls = new int[num];
        for (int dice : rolls){
            dice = random.nextInt(6) + 1;
        }
        return rolls;
    }

    public boolean containsDuplicates (int[] array){
        HashSet hash = new HashSet();
        boolean hasDupes = false;
        for (int num : array){
            hasDupes = hash.add(num) ? hasDupes : true;
        }
        return hasDupes;
    }

    public float calcAvg(int[] array){
        int dividend = 0;
        int divisor = array.length;
        float quotient = 0;
        for (int num : array){
            dividend += num;
        }
        quotient = (float) dividend / divisor;
        return quotient;
    }

    public int[] lowestArrayAvg(int[][] nested){
        if (nested[0].length < 2){
            return nested[0];
        }
        int[] lowestArr = nested[0];
        float low = calcAvg(nested[0]);
        for (int[] inner : nested){
            float curr = calcAvg(inner);
            if (curr < low){
                low = curr;
                lowestArr = inner;
            }
        }
        return lowestArr;
    }

    public void analyzeWeather(int[][] month){
        int low = month[0][0];
        int high = month[0][0];
        HashSet<Integer> temps = new HashSet<>();
        for (int[] week : month){
            for (int day : week){
                temps.add(day);
                if (day < low){
                    low = day;
                }
                if (day > high){
                    high = day;
                }
            }
        }
        System.out.println("High: " + high);
        System.out.println("Low: " + low);
        for (int counter = low; counter <= high; counter++){
            if (!temps.contains(counter)){
                System.out.println("Never saw temperature: " + counter);
            }
        }
    }

    public String tally(List<String> votes){
        HashMap<String, Integer> results = new HashMap<>();
        for (String vote : votes){
            if (results.containsKey(vote)){
                results.put(vote, results.get(vote) + 1);
            } else {
                results.put(vote, 0);
            }
        }
        int most = 0;
        String winner = "";
        for (String name : results.keySet()){
            int has = results.get(name);
            if (has > most){
                most = has;
                winner = name;
            }
        }
        return winner;
    }
}
